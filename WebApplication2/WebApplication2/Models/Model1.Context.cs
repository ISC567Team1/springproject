//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WebApplication2.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class DATABASE_EDTSEntities : DbContext
    {
        public DATABASE_EDTSEntities()
            : base("name=DATABASE_EDTSEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Answer> Answers { get; set; }
        public virtual DbSet<BKLevel1> BKLevel1 { get; set; }
        public virtual DbSet<BKLevel2> BKLevel2 { get; set; }
        public virtual DbSet<course> courses { get; set; }
        public virtual DbSet<courseoutcome> courseoutcomes { get; set; }
        public virtual DbSet<curriculum> curricula { get; set; }
        public virtual DbSet<CurriculumPeople> CurriculumPeoples { get; set; }
        public virtual DbSet<etype> etypes { get; set; }
        public virtual DbSet<exam> exams { get; set; }
        public virtual DbSet<exam_status> exam_status { get; set; }
        public virtual DbSet<examitem> examitems { get; set; }
        public virtual DbSet<ExK1> ExK1 { get; set; }
        public virtual DbSet<ExK2> ExK2 { get; set; }
        public virtual DbSet<ExK3> ExK3 { get; set; }
        public virtual DbSet<institution> institutions { get; set; }
        public virtual DbSet<institutionpeople> institutionpeoples { get; set; }
        public virtual DbSet<InstitutionProgram> InstitutionPrograms { get; set; }
        public virtual DbSet<key1> key1 { get; set; }
        public virtual DbSet<key2> key2 { get; set; }
        public virtual DbSet<key3> key3 { get; set; }
        public virtual DbSet<Person> People { get; set; }
        public virtual DbSet<program> programs { get; set; }
        public virtual DbSet<programstatu> programstatus { get; set; }
        public virtual DbSet<programstatushistory> programstatushistories { get; set; }
        public virtual DbSet<roster> rosters { get; set; }
        public virtual DbSet<scheduled_exam> scheduled_exam { get; set; }
        public virtual DbSet<skillclass> skillclasses { get; set; }
        public virtual DbSet<skill> skills { get; set; }
        public virtual DbSet<society> societies { get; set; }
        public virtual DbSet<sponsor> sponsors { get; set; }
        public virtual DbSet<subskill> subskills { get; set; }
        public virtual DbSet<subskillincourseoutcome> subskillincourseoutcomes { get; set; }
        public virtual DbSet<svtable> svtables { get; set; }
        public virtual DbSet<taker> takers { get; set; }
        public virtual DbSet<taker_exam_status> taker_exam_status { get; set; }
    
        public virtual int EditBKLevel1Info(Nullable<int> bKLevel1ID, string title, Nullable<int> numberL1, Nullable<int> programid, Nullable<int> curriculumid)
        {
            var bKLevel1IDParameter = bKLevel1ID.HasValue ?
                new ObjectParameter("BKLevel1ID", bKLevel1ID) :
                new ObjectParameter("BKLevel1ID", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var numberL1Parameter = numberL1.HasValue ?
                new ObjectParameter("NumberL1", numberL1) :
                new ObjectParameter("NumberL1", typeof(int));
    
            var programidParameter = programid.HasValue ?
                new ObjectParameter("programid", programid) :
                new ObjectParameter("programid", typeof(int));
    
            var curriculumidParameter = curriculumid.HasValue ?
                new ObjectParameter("curriculumid", curriculumid) :
                new ObjectParameter("curriculumid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditBKLevel1Info", bKLevel1IDParameter, titleParameter, numberL1Parameter, programidParameter, curriculumidParameter);
        }
    
        public virtual int EditBKLevel2Info(Nullable<int> bKLevel2ID, Nullable<int> curriculumid, Nullable<int> programID, Nullable<int> bKLevel1ID, Nullable<int> numberL1, Nullable<int> numberL2, string title)
        {
            var bKLevel2IDParameter = bKLevel2ID.HasValue ?
                new ObjectParameter("BKLevel2ID", bKLevel2ID) :
                new ObjectParameter("BKLevel2ID", typeof(int));
    
            var curriculumidParameter = curriculumid.HasValue ?
                new ObjectParameter("curriculumid", curriculumid) :
                new ObjectParameter("curriculumid", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("programID", programID) :
                new ObjectParameter("programID", typeof(int));
    
            var bKLevel1IDParameter = bKLevel1ID.HasValue ?
                new ObjectParameter("BKLevel1ID", bKLevel1ID) :
                new ObjectParameter("BKLevel1ID", typeof(int));
    
            var numberL1Parameter = numberL1.HasValue ?
                new ObjectParameter("NumberL1", numberL1) :
                new ObjectParameter("NumberL1", typeof(int));
    
            var numberL2Parameter = numberL2.HasValue ?
                new ObjectParameter("NumberL2", numberL2) :
                new ObjectParameter("NumberL2", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditBKLevel2Info", bKLevel2IDParameter, curriculumidParameter, programIDParameter, bKLevel1IDParameter, numberL1Parameter, numberL2Parameter, titleParameter);
        }
    
        public virtual int EditcurriculumInfo(Nullable<int> curriculumid, string curriculum_shortname, string curriculum_longname)
        {
            var curriculumidParameter = curriculumid.HasValue ?
                new ObjectParameter("curriculumid", curriculumid) :
                new ObjectParameter("curriculumid", typeof(int));
    
            var curriculum_shortnameParameter = curriculum_shortname != null ?
                new ObjectParameter("curriculum_shortname", curriculum_shortname) :
                new ObjectParameter("curriculum_shortname", typeof(string));
    
            var curriculum_longnameParameter = curriculum_longname != null ?
                new ObjectParameter("curriculum_longname", curriculum_longname) :
                new ObjectParameter("curriculum_longname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditcurriculumInfo", curriculumidParameter, curriculum_shortnameParameter, curriculum_longnameParameter);
        }
    
        public virtual int EditSkillClass(Nullable<int> skillclassid, string scname, Nullable<int> programid)
        {
            var skillclassidParameter = skillclassid.HasValue ?
                new ObjectParameter("skillclassid", skillclassid) :
                new ObjectParameter("skillclassid", typeof(int));
    
            var scnameParameter = scname != null ?
                new ObjectParameter("scname", scname) :
                new ObjectParameter("scname", typeof(string));
    
            var programidParameter = programid.HasValue ?
                new ObjectParameter("programid", programid) :
                new ObjectParameter("programid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditSkillClass", skillclassidParameter, scnameParameter, programidParameter);
        }
    
        public virtual int EditSkills(Nullable<int> skillsid, Nullable<int> skillsclassid, string skillsname)
        {
            var skillsidParameter = skillsid.HasValue ?
                new ObjectParameter("skillsid", skillsid) :
                new ObjectParameter("skillsid", typeof(int));
    
            var skillsclassidParameter = skillsclassid.HasValue ?
                new ObjectParameter("skillsclassid", skillsclassid) :
                new ObjectParameter("skillsclassid", typeof(int));
    
            var skillsnameParameter = skillsname != null ?
                new ObjectParameter("skillsname", skillsname) :
                new ObjectParameter("skillsname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditSkills", skillsidParameter, skillsclassidParameter, skillsnameParameter);
        }
    
        public virtual int EditsocietyInfo(Nullable<int> societyid, string society_shortname, string society_longname)
        {
            var societyidParameter = societyid.HasValue ?
                new ObjectParameter("societyid", societyid) :
                new ObjectParameter("societyid", typeof(int));
    
            var society_shortnameParameter = society_shortname != null ?
                new ObjectParameter("society_shortname", society_shortname) :
                new ObjectParameter("society_shortname", typeof(string));
    
            var society_longnameParameter = society_longname != null ?
                new ObjectParameter("society_longname", society_longname) :
                new ObjectParameter("society_longname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditsocietyInfo", societyidParameter, society_shortnameParameter, society_longnameParameter);
        }
    
        public virtual int EditsponsorInfo(Nullable<int> sponsorid, Nullable<System.DateTime> sponsored_on)
        {
            var sponsoridParameter = sponsorid.HasValue ?
                new ObjectParameter("sponsorid", sponsorid) :
                new ObjectParameter("sponsorid", typeof(int));
    
            var sponsored_onParameter = sponsored_on.HasValue ?
                new ObjectParameter("sponsored_on", sponsored_on) :
                new ObjectParameter("sponsored_on", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditsponsorInfo", sponsoridParameter, sponsored_onParameter);
        }
    
        public virtual int EditSubskill(Nullable<int> subskillid, Nullable<int> skillsid, string subskillcomb, string subskilltitle, string jobadwords)
        {
            var subskillidParameter = subskillid.HasValue ?
                new ObjectParameter("subskillid", subskillid) :
                new ObjectParameter("subskillid", typeof(int));
    
            var skillsidParameter = skillsid.HasValue ?
                new ObjectParameter("skillsid", skillsid) :
                new ObjectParameter("skillsid", typeof(int));
    
            var subskillcombParameter = subskillcomb != null ?
                new ObjectParameter("subskillcomb", subskillcomb) :
                new ObjectParameter("subskillcomb", typeof(string));
    
            var subskilltitleParameter = subskilltitle != null ?
                new ObjectParameter("subskilltitle", subskilltitle) :
                new ObjectParameter("subskilltitle", typeof(string));
    
            var jobadwordsParameter = jobadwords != null ?
                new ObjectParameter("jobadwords", jobadwords) :
                new ObjectParameter("jobadwords", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("EditSubskill", subskillidParameter, skillsidParameter, subskillcombParameter, subskilltitleParameter, jobadwordsParameter);
        }
    
        public virtual ObjectResult<ExamConfDetails_Result> ExamConfDetails(Nullable<int> examid)
        {
            var examidParameter = examid.HasValue ?
                new ObjectParameter("examid", examid) :
                new ObjectParameter("examid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ExamConfDetails_Result>("ExamConfDetails", examidParameter);
        }
    
        public virtual ObjectResult<GetAllScheduleExams_Result> GetAllScheduleExams(Nullable<int> institutionID)
        {
            var institutionIDParameter = institutionID.HasValue ?
                new ObjectParameter("InstitutionID", institutionID) :
                new ObjectParameter("InstitutionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetAllScheduleExams_Result>("GetAllScheduleExams", institutionIDParameter);
        }
    
        public virtual ObjectResult<GetBKLevel1Info_Result> GetBKLevel1Info(Nullable<int> bKLevel1ID)
        {
            var bKLevel1IDParameter = bKLevel1ID.HasValue ?
                new ObjectParameter("BKLevel1ID", bKLevel1ID) :
                new ObjectParameter("BKLevel1ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBKLevel1Info_Result>("GetBKLevel1Info", bKLevel1IDParameter);
        }
    
        public virtual ObjectResult<getBKLevel2byBKLevel1_Result> getBKLevel2byBKLevel1(Nullable<int> bKLEVEL1ID)
        {
            var bKLEVEL1IDParameter = bKLEVEL1ID.HasValue ?
                new ObjectParameter("BKLEVEL1ID", bKLEVEL1ID) :
                new ObjectParameter("BKLEVEL1ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<getBKLevel2byBKLevel1_Result>("getBKLevel2byBKLevel1", bKLEVEL1IDParameter);
        }
    
        public virtual ObjectResult<GetBKLevel2Info_Result> GetBKLevel2Info(Nullable<int> bKLevel2ID)
        {
            var bKLevel2IDParameter = bKLevel2ID.HasValue ?
                new ObjectParameter("BKLevel2ID", bKLevel2ID) :
                new ObjectParameter("BKLevel2ID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetBKLevel2Info_Result>("GetBKLevel2Info", bKLevel2IDParameter);
        }
    
        public virtual ObjectResult<GetCourse_Result> GetCourse(Nullable<int> courseId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourse_Result>("GetCourse", courseIdParameter);
        }
    
        public virtual ObjectResult<GetCourseOutComes_Result> GetCourseOutComes(Nullable<int> crsoutcomesid, Nullable<int> courseid)
        {
            var crsoutcomesidParameter = crsoutcomesid.HasValue ?
                new ObjectParameter("crsoutcomesid", crsoutcomesid) :
                new ObjectParameter("crsoutcomesid", typeof(int));
    
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetCourseOutComes_Result>("GetCourseOutComes", crsoutcomesidParameter, courseidParameter);
        }
    
        public virtual ObjectResult<GetcurriculumInfo_Result> GetcurriculumInfo(Nullable<int> curriculumid)
        {
            var curriculumidParameter = curriculumid.HasValue ?
                new ObjectParameter("curriculumid", curriculumid) :
                new ObjectParameter("curriculumid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetcurriculumInfo_Result>("GetcurriculumInfo", curriculumidParameter);
        }
    
        public virtual ObjectResult<GetExam_Result> GetExam()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExam_Result>("GetExam");
        }
    
        public virtual ObjectResult<GetExamDetailsForItemEditScreen_Result> GetExamDetailsForItemEditScreen(Nullable<int> examID)
        {
            var examIDParameter = examID.HasValue ?
                new ObjectParameter("ExamID", examID) :
                new ObjectParameter("ExamID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamDetailsForItemEditScreen_Result>("GetExamDetailsForItemEditScreen", examIDParameter);
        }
    
        public virtual ObjectResult<GetExamDetailsForItemScreen_Result> GetExamDetailsForItemScreen(Nullable<int> examid)
        {
            var examidParameter = examid.HasValue ?
                new ObjectParameter("examid", examid) :
                new ObjectParameter("examid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamDetailsForItemScreen_Result>("GetExamDetailsForItemScreen", examidParameter);
        }
    
        public virtual ObjectResult<GetExamItem_Result> GetExamItem(Nullable<int> examid)
        {
            var examidParameter = examid.HasValue ?
                new ObjectParameter("examid", examid) :
                new ObjectParameter("examid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamItem_Result>("GetExamItem", examidParameter);
        }
    
        public virtual ObjectResult<GetExamItemByExam_Result> GetExamItemByExam(Nullable<int> examid)
        {
            var examidParameter = examid.HasValue ?
                new ObjectParameter("examid", examid) :
                new ObjectParameter("examid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamItemByExam_Result>("GetExamItemByExam", examidParameter);
        }
    
        public virtual ObjectResult<GetExamList_Result> GetExamList(Nullable<int> institutionID)
        {
            var institutionIDParameter = institutionID.HasValue ?
                new ObjectParameter("InstitutionID", institutionID) :
                new ObjectParameter("InstitutionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamList_Result>("GetExamList", institutionIDParameter);
        }
    
        public virtual ObjectResult<GetExamListbyInstAndProgID_Result> GetExamListbyInstAndProgID(Nullable<int> institutionID, Nullable<int> programID)
        {
            var institutionIDParameter = institutionID.HasValue ?
                new ObjectParameter("InstitutionID", institutionID) :
                new ObjectParameter("InstitutionID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamListbyInstAndProgID_Result>("GetExamListbyInstAndProgID", institutionIDParameter, programIDParameter);
        }
    
        public virtual ObjectResult<GetExamTakersList_Result> GetExamTakersList(Nullable<int> scheduledexamid)
        {
            var scheduledexamidParameter = scheduledexamid.HasValue ?
                new ObjectParameter("scheduledexamid", scheduledexamid) :
                new ObjectParameter("scheduledexamid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetExamTakersList_Result>("GetExamTakersList", scheduledexamidParameter);
        }
    
        public virtual ObjectResult<GetInProgressScheduleExams_Result> GetInProgressScheduleExams(Nullable<int> institutionID)
        {
            var institutionIDParameter = institutionID.HasValue ?
                new ObjectParameter("InstitutionID", institutionID) :
                new ObjectParameter("InstitutionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInProgressScheduleExams_Result>("GetInProgressScheduleExams", institutionIDParameter);
        }
    
        public virtual ObjectResult<GetRosterList_Result> GetRosterList(Nullable<int> personID)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetRosterList_Result>("GetRosterList", personIDParameter);
        }
    
        public virtual ObjectResult<GetScheduleExambyID_Result> GetScheduleExambyID(Nullable<int> examid)
        {
            var examidParameter = examid.HasValue ?
                new ObjectParameter("examid", examid) :
                new ObjectParameter("examid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetScheduleExambyID_Result>("GetScheduleExambyID", examidParameter);
        }
    
        public virtual ObjectResult<GetScheduleExamInfo_Result> GetScheduleExamInfo(Nullable<int> institutionID, Nullable<int> scheduledexamid)
        {
            var institutionIDParameter = institutionID.HasValue ?
                new ObjectParameter("InstitutionID", institutionID) :
                new ObjectParameter("InstitutionID", typeof(int));
    
            var scheduledexamidParameter = scheduledexamid.HasValue ?
                new ObjectParameter("scheduledexamid", scheduledexamid) :
                new ObjectParameter("scheduledexamid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetScheduleExamInfo_Result>("GetScheduleExamInfo", institutionIDParameter, scheduledexamidParameter);
        }
    
        public virtual ObjectResult<GetSkillClassInfo_Result> GetSkillClassInfo(Nullable<int> skillclassid)
        {
            var skillclassidParameter = skillclassid.HasValue ?
                new ObjectParameter("skillclassid", skillclassid) :
                new ObjectParameter("skillclassid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSkillClassInfo_Result>("GetSkillClassInfo", skillclassidParameter);
        }
    
        public virtual ObjectResult<GetSkillsBySkillClassnum_Result> GetSkillsBySkillClassnum(Nullable<int> skillsclassnum)
        {
            var skillsclassnumParameter = skillsclassnum.HasValue ?
                new ObjectParameter("skillsclassnum", skillsclassnum) :
                new ObjectParameter("skillsclassnum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSkillsBySkillClassnum_Result>("GetSkillsBySkillClassnum", skillsclassnumParameter);
        }
    
        public virtual ObjectResult<GetSkillsInfo_Result> GetSkillsInfo(Nullable<int> skillsId)
        {
            var skillsIdParameter = skillsId.HasValue ?
                new ObjectParameter("skillsId", skillsId) :
                new ObjectParameter("skillsId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSkillsInfo_Result>("GetSkillsInfo", skillsIdParameter);
        }
    
        public virtual ObjectResult<GetsocietyInfo_Result> GetsocietyInfo(Nullable<int> societyid)
        {
            var societyidParameter = societyid.HasValue ?
                new ObjectParameter("societyid", societyid) :
                new ObjectParameter("societyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetsocietyInfo_Result>("GetsocietyInfo", societyidParameter);
        }
    
        public virtual ObjectResult<GetsocietyList_Result> GetsocietyList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetsocietyList_Result>("GetsocietyList");
        }
    
        public virtual ObjectResult<GetsponsorList_Result> GetsponsorList(Nullable<int> societyid)
        {
            var societyidParameter = societyid.HasValue ?
                new ObjectParameter("societyid", societyid) :
                new ObjectParameter("societyid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetsponsorList_Result>("GetsponsorList", societyidParameter);
        }
    
        public virtual ObjectResult<GetsponsorsInfo_Result> GetsponsorsInfo(Nullable<int> sponsorid)
        {
            var sponsoridParameter = sponsorid.HasValue ?
                new ObjectParameter("sponsorid", sponsorid) :
                new ObjectParameter("sponsorid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetsponsorsInfo_Result>("GetsponsorsInfo", sponsoridParameter);
        }
    
        public virtual ObjectResult<GetSubSkillBySkillClassNum_Result> GetSubSkillBySkillClassNum(Nullable<int> skillsid)
        {
            var skillsidParameter = skillsid.HasValue ?
                new ObjectParameter("skillsid", skillsid) :
                new ObjectParameter("skillsid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubSkillBySkillClassNum_Result>("GetSubSkillBySkillClassNum", skillsidParameter);
        }
    
        public virtual ObjectResult<GetSubSkillInfo_Result> GetSubSkillInfo(Nullable<int> subskillid)
        {
            var subskillidParameter = subskillid.HasValue ?
                new ObjectParameter("subskillid", subskillid) :
                new ObjectParameter("subskillid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSubSkillInfo_Result>("GetSubSkillInfo", subskillidParameter);
        }
    
        public virtual ObjectResult<GetSVTable_Result> GetSVTable()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetSVTable_Result>("GetSVTable");
        }
    
        public virtual ObjectResult<GetUserProfile_Result> GetUserProfile(string username, string password)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetUserProfile_Result>("GetUserProfile", usernameParameter, passwordParameter);
        }
    
        public virtual int InsertBKLevel1(string title, Nullable<int> numberL1, Nullable<int> programid, Nullable<int> curriculumid)
        {
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            var numberL1Parameter = numberL1.HasValue ?
                new ObjectParameter("NumberL1", numberL1) :
                new ObjectParameter("NumberL1", typeof(int));
    
            var programidParameter = programid.HasValue ?
                new ObjectParameter("programid", programid) :
                new ObjectParameter("programid", typeof(int));
    
            var curriculumidParameter = curriculumid.HasValue ?
                new ObjectParameter("curriculumid", curriculumid) :
                new ObjectParameter("curriculumid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBKLevel1", titleParameter, numberL1Parameter, programidParameter, curriculumidParameter);
        }
    
        public virtual int InsertBKLevel2(Nullable<int> curriculumid, Nullable<int> programid, Nullable<int> bKLevel1ID, Nullable<int> numberL1, Nullable<int> numberL2, string title)
        {
            var curriculumidParameter = curriculumid.HasValue ?
                new ObjectParameter("curriculumid", curriculumid) :
                new ObjectParameter("curriculumid", typeof(int));
    
            var programidParameter = programid.HasValue ?
                new ObjectParameter("programid", programid) :
                new ObjectParameter("programid", typeof(int));
    
            var bKLevel1IDParameter = bKLevel1ID.HasValue ?
                new ObjectParameter("BKLevel1ID", bKLevel1ID) :
                new ObjectParameter("BKLevel1ID", typeof(int));
    
            var numberL1Parameter = numberL1.HasValue ?
                new ObjectParameter("NumberL1", numberL1) :
                new ObjectParameter("NumberL1", typeof(int));
    
            var numberL2Parameter = numberL2.HasValue ?
                new ObjectParameter("NumberL2", numberL2) :
                new ObjectParameter("NumberL2", typeof(int));
    
            var titleParameter = title != null ?
                new ObjectParameter("title", title) :
                new ObjectParameter("title", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertBKLevel2", curriculumidParameter, programidParameter, bKLevel1IDParameter, numberL1Parameter, numberL2Parameter, titleParameter);
        }
    
        public virtual int InsertCourse(Nullable<int> courseid, string shorttitle, Nullable<int> progid, string longtitle, string catdesc, string topics, string discussion, string yearinprog, Nullable<int> sequencenum)
        {
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            var shorttitleParameter = shorttitle != null ?
                new ObjectParameter("shorttitle", shorttitle) :
                new ObjectParameter("shorttitle", typeof(string));
    
            var progidParameter = progid.HasValue ?
                new ObjectParameter("progid", progid) :
                new ObjectParameter("progid", typeof(int));
    
            var longtitleParameter = longtitle != null ?
                new ObjectParameter("longtitle", longtitle) :
                new ObjectParameter("longtitle", typeof(string));
    
            var catdescParameter = catdesc != null ?
                new ObjectParameter("catdesc", catdesc) :
                new ObjectParameter("catdesc", typeof(string));
    
            var topicsParameter = topics != null ?
                new ObjectParameter("topics", topics) :
                new ObjectParameter("topics", typeof(string));
    
            var discussionParameter = discussion != null ?
                new ObjectParameter("discussion", discussion) :
                new ObjectParameter("discussion", typeof(string));
    
            var yearinprogParameter = yearinprog != null ?
                new ObjectParameter("yearinprog", yearinprog) :
                new ObjectParameter("yearinprog", typeof(string));
    
            var sequencenumParameter = sequencenum.HasValue ?
                new ObjectParameter("sequencenum", sequencenum) :
                new ObjectParameter("sequencenum", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCourse", courseidParameter, shorttitleParameter, progidParameter, longtitleParameter, catdescParameter, topicsParameter, discussionParameter, yearinprogParameter, sequencenumParameter);
        }
    
        public virtual int InsertCourseOutcomes(Nullable<int> crsoutcomesid, Nullable<int> programid, Nullable<int> courseid, string crsoutcometext, string crsshortoutcome, Nullable<int> crssequencenum, string crsoutcomenum)
        {
            var crsoutcomesidParameter = crsoutcomesid.HasValue ?
                new ObjectParameter("crsoutcomesid", crsoutcomesid) :
                new ObjectParameter("crsoutcomesid", typeof(int));
    
            var programidParameter = programid.HasValue ?
                new ObjectParameter("programid", programid) :
                new ObjectParameter("programid", typeof(int));
    
            var courseidParameter = courseid.HasValue ?
                new ObjectParameter("courseid", courseid) :
                new ObjectParameter("courseid", typeof(int));
    
            var crsoutcometextParameter = crsoutcometext != null ?
                new ObjectParameter("crsoutcometext", crsoutcometext) :
                new ObjectParameter("crsoutcometext", typeof(string));
    
            var crsshortoutcomeParameter = crsshortoutcome != null ?
                new ObjectParameter("crsshortoutcome", crsshortoutcome) :
                new ObjectParameter("crsshortoutcome", typeof(string));
    
            var crssequencenumParameter = crssequencenum.HasValue ?
                new ObjectParameter("crssequencenum", crssequencenum) :
                new ObjectParameter("crssequencenum", typeof(int));
    
            var crsoutcomenumParameter = crsoutcomenum != null ?
                new ObjectParameter("crsoutcomenum", crsoutcomenum) :
                new ObjectParameter("crsoutcomenum", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertCourseOutcomes", crsoutcomesidParameter, programidParameter, courseidParameter, crsoutcometextParameter, crsshortoutcomeParameter, crssequencenumParameter, crsoutcomenumParameter);
        }
    
        public virtual int Insertcurriculum(string curriculum_shortname, string curriculum_longname)
        {
            var curriculum_shortnameParameter = curriculum_shortname != null ?
                new ObjectParameter("curriculum_shortname", curriculum_shortname) :
                new ObjectParameter("curriculum_shortname", typeof(string));
    
            var curriculum_longnameParameter = curriculum_longname != null ?
                new ObjectParameter("curriculum_longname", curriculum_longname) :
                new ObjectParameter("curriculum_longname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insertcurriculum", curriculum_shortnameParameter, curriculum_longnameParameter);
        }
    
        public virtual int InsertScheduleExamDetails(Nullable<int> examid, string examname, Nullable<System.DateTime> examdate, Nullable<System.DateTime> examstarttime, Nullable<System.DateTime> examendtime, string examlocation, Nullable<int> institutionpeopleid)
        {
            var examidParameter = examid.HasValue ?
                new ObjectParameter("examid", examid) :
                new ObjectParameter("examid", typeof(int));
    
            var examnameParameter = examname != null ?
                new ObjectParameter("examname", examname) :
                new ObjectParameter("examname", typeof(string));
    
            var examdateParameter = examdate.HasValue ?
                new ObjectParameter("examdate", examdate) :
                new ObjectParameter("examdate", typeof(System.DateTime));
    
            var examstarttimeParameter = examstarttime.HasValue ?
                new ObjectParameter("examstarttime", examstarttime) :
                new ObjectParameter("examstarttime", typeof(System.DateTime));
    
            var examendtimeParameter = examendtime.HasValue ?
                new ObjectParameter("examendtime", examendtime) :
                new ObjectParameter("examendtime", typeof(System.DateTime));
    
            var examlocationParameter = examlocation != null ?
                new ObjectParameter("examlocation", examlocation) :
                new ObjectParameter("examlocation", typeof(string));
    
            var institutionpeopleidParameter = institutionpeopleid.HasValue ?
                new ObjectParameter("institutionpeopleid", institutionpeopleid) :
                new ObjectParameter("institutionpeopleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertScheduleExamDetails", examidParameter, examnameParameter, examdateParameter, examstarttimeParameter, examendtimeParameter, examlocationParameter, institutionpeopleidParameter);
        }
    
        public virtual int InsertScheduleExamForTaker(Nullable<int> personID, string examname, string status)
        {
            var personIDParameter = personID.HasValue ?
                new ObjectParameter("PersonID", personID) :
                new ObjectParameter("PersonID", typeof(int));
    
            var examnameParameter = examname != null ?
                new ObjectParameter("examname", examname) :
                new ObjectParameter("examname", typeof(string));
    
            var statusParameter = status != null ?
                new ObjectParameter("status", status) :
                new ObjectParameter("status", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertScheduleExamForTaker", personIDParameter, examnameParameter, statusParameter);
        }
    
        public virtual int InsertSkillClass(string scname, Nullable<int> programid)
        {
            var scnameParameter = scname != null ?
                new ObjectParameter("scname", scname) :
                new ObjectParameter("scname", typeof(string));
    
            var programidParameter = programid.HasValue ?
                new ObjectParameter("programid", programid) :
                new ObjectParameter("programid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSkillClass", scnameParameter, programidParameter);
        }
    
        public virtual int InsertSkills(Nullable<int> skillsclassid, string skillsname)
        {
            var skillsclassidParameter = skillsclassid.HasValue ?
                new ObjectParameter("skillsclassid", skillsclassid) :
                new ObjectParameter("skillsclassid", typeof(int));
    
            var skillsnameParameter = skillsname != null ?
                new ObjectParameter("skillsname", skillsname) :
                new ObjectParameter("skillsname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSkills", skillsclassidParameter, skillsnameParameter);
        }
    
        public virtual int Insertsociety(string society_shortname, string society_longname)
        {
            var society_shortnameParameter = society_shortname != null ?
                new ObjectParameter("society_shortname", society_shortname) :
                new ObjectParameter("society_shortname", typeof(string));
    
            var society_longnameParameter = society_longname != null ?
                new ObjectParameter("society_longname", society_longname) :
                new ObjectParameter("society_longname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insertsociety", society_shortnameParameter, society_longnameParameter);
        }
    
        public virtual int Insertsponsor(Nullable<int> societyid, Nullable<int> curriculumid, Nullable<System.DateTime> sponsored_on)
        {
            var societyidParameter = societyid.HasValue ?
                new ObjectParameter("societyid", societyid) :
                new ObjectParameter("societyid", typeof(int));
    
            var curriculumidParameter = curriculumid.HasValue ?
                new ObjectParameter("curriculumid", curriculumid) :
                new ObjectParameter("curriculumid", typeof(int));
    
            var sponsored_onParameter = sponsored_on.HasValue ?
                new ObjectParameter("sponsored_on", sponsored_on) :
                new ObjectParameter("sponsored_on", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("Insertsponsor", societyidParameter, curriculumidParameter, sponsored_onParameter);
        }
    
        public virtual int InsertSubskill(Nullable<int> skillsid, string subskillcomb, string subskilltitle, string jobadwords)
        {
            var skillsidParameter = skillsid.HasValue ?
                new ObjectParameter("Skillsid", skillsid) :
                new ObjectParameter("Skillsid", typeof(int));
    
            var subskillcombParameter = subskillcomb != null ?
                new ObjectParameter("subskillcomb", subskillcomb) :
                new ObjectParameter("subskillcomb", typeof(string));
    
            var subskilltitleParameter = subskilltitle != null ?
                new ObjectParameter("subskilltitle", subskilltitle) :
                new ObjectParameter("subskilltitle", typeof(string));
    
            var jobadwordsParameter = jobadwords != null ?
                new ObjectParameter("jobadwords", jobadwords) :
                new ObjectParameter("jobadwords", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("InsertSubskill", skillsidParameter, subskillcombParameter, subskilltitleParameter, jobadwordsParameter);
        }
    
        public virtual ObjectResult<ListBodyOfKnowledge_Result> ListBodyOfKnowledge(Nullable<int> programid)
        {
            var programidParameter = programid.HasValue ?
                new ObjectParameter("programid", programid) :
                new ObjectParameter("programid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListBodyOfKnowledge_Result>("ListBodyOfKnowledge", programidParameter);
        }
    
        public virtual ObjectResult<ListCourse_Result> ListCourse(Nullable<int> programId)
        {
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("ProgramId", programId) :
                new ObjectParameter("ProgramId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListCourse_Result>("ListCourse", programIdParameter);
        }
    
        public virtual ObjectResult<ListCourseOutComes_Result> ListCourseOutComes(Nullable<int> courseId)
        {
            var courseIdParameter = courseId.HasValue ?
                new ObjectParameter("CourseId", courseId) :
                new ObjectParameter("CourseId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListCourseOutComes_Result>("ListCourseOutComes", courseIdParameter);
        }
    
        public virtual ObjectResult<ListKey1_Result> ListKey1()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListKey1_Result>("ListKey1");
        }
    
        public virtual ObjectResult<ListSkillClass_Result> ListSkillClass(Nullable<int> programid)
        {
            var programidParameter = programid.HasValue ?
                new ObjectParameter("programid", programid) :
                new ObjectParameter("programid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<ListSkillClass_Result>("ListSkillClass", programidParameter);
        }
    
        public virtual int sp_AddorUpdateExam(Nullable<int> examid, Nullable<int> etypeid, string examname, string exampurpose, Nullable<decimal> duration, Nullable<int> examstatusid, Nullable<int> programid)
        {
            var examidParameter = examid.HasValue ?
                new ObjectParameter("examid", examid) :
                new ObjectParameter("examid", typeof(int));
    
            var etypeidParameter = etypeid.HasValue ?
                new ObjectParameter("etypeid", etypeid) :
                new ObjectParameter("etypeid", typeof(int));
    
            var examnameParameter = examname != null ?
                new ObjectParameter("examname", examname) :
                new ObjectParameter("examname", typeof(string));
    
            var exampurposeParameter = exampurpose != null ?
                new ObjectParameter("exampurpose", exampurpose) :
                new ObjectParameter("exampurpose", typeof(string));
    
            var durationParameter = duration.HasValue ?
                new ObjectParameter("duration", duration) :
                new ObjectParameter("duration", typeof(decimal));
    
            var examstatusidParameter = examstatusid.HasValue ?
                new ObjectParameter("examstatusid", examstatusid) :
                new ObjectParameter("examstatusid", typeof(int));
    
            var programidParameter = programid.HasValue ?
                new ObjectParameter("programid", programid) :
                new ObjectParameter("programid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_AddorUpdateExam", examidParameter, etypeidParameter, examnameParameter, exampurposeParameter, durationParameter, examstatusidParameter, programidParameter);
        }
    
        public virtual int sp_DeleteItemById(Nullable<int> examitemid)
        {
            var examitemidParameter = examitemid.HasValue ?
                new ObjectParameter("examitemid", examitemid) :
                new ObjectParameter("examitemid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeleteItemById", examitemidParameter);
        }
    
        public virtual int sp_DeletePersonById(Nullable<int> personId)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_DeletePersonById", personIdParameter);
        }
    
        public virtual ObjectResult<sp_GetAnswer_Result> sp_GetAnswer(Nullable<int> examitemid, Nullable<int> rosterid)
        {
            var examitemidParameter = examitemid.HasValue ?
                new ObjectParameter("examitemid", examitemid) :
                new ObjectParameter("examitemid", typeof(int));
    
            var rosteridParameter = rosterid.HasValue ?
                new ObjectParameter("rosterid", rosterid) :
                new ObjectParameter("rosterid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAnswer_Result>("sp_GetAnswer", examitemidParameter, rosteridParameter);
        }
    
        public virtual ObjectResult<sp_GetcurriculumList_Result> sp_GetcurriculumList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetcurriculumList_Result>("sp_GetcurriculumList");
        }
    
        public virtual ObjectResult<sp_GetCurriculumNames_Result> sp_GetCurriculumNames()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCurriculumNames_Result>("sp_GetCurriculumNames");
        }
    
        public virtual ObjectResult<sp_GetCurriculumPeople_Result> sp_GetCurriculumPeople(Nullable<int> curriculumID)
        {
            var curriculumIDParameter = curriculumID.HasValue ?
                new ObjectParameter("curriculumID", curriculumID) :
                new ObjectParameter("curriculumID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetCurriculumPeople_Result>("sp_GetCurriculumPeople", curriculumIDParameter);
        }
    
        public virtual ObjectResult<sp_GetETypeExamInfo_Result> sp_GetETypeExamInfo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetETypeExamInfo_Result>("sp_GetETypeExamInfo");
        }
    
        public virtual ObjectResult<sp_GetExamItemForEdit_Result> sp_GetExamItemForEdit(Nullable<int> examitemid)
        {
            var examitemidParameter = examitemid.HasValue ?
                new ObjectParameter("examitemid", examitemid) :
                new ObjectParameter("examitemid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetExamItemForEdit_Result>("sp_GetExamItemForEdit", examitemidParameter);
        }
    
        public virtual ObjectResult<sp_GetexamListforEdit_Result> sp_GetexamListforEdit(Nullable<int> examid)
        {
            var examidParameter = examid.HasValue ?
                new ObjectParameter("examid", examid) :
                new ObjectParameter("examid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetexamListforEdit_Result>("sp_GetexamListforEdit", examidParameter);
        }
    
        public virtual ObjectResult<sp_GetExamStatus_Result> sp_GetExamStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetExamStatus_Result>("sp_GetExamStatus");
        }
    
        public virtual ObjectResult<sp_GetInstitutionExamByStatus_Result> sp_GetInstitutionExamByStatus(Nullable<int> institutionId, Nullable<int> examStatusId)
        {
            var institutionIdParameter = institutionId.HasValue ?
                new ObjectParameter("institutionId", institutionId) :
                new ObjectParameter("institutionId", typeof(int));
    
            var examStatusIdParameter = examStatusId.HasValue ?
                new ObjectParameter("examStatusId", examStatusId) :
                new ObjectParameter("examStatusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetInstitutionExamByStatus_Result>("sp_GetInstitutionExamByStatus", institutionIdParameter, examStatusIdParameter);
        }
    
        public virtual ObjectResult<sp_GetInstitutionList_Result> sp_GetInstitutionList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetInstitutionList_Result>("sp_GetInstitutionList");
        }
    
        public virtual ObjectResult<sp_GetInstitutionPeopleListById_Result> sp_GetInstitutionPeopleListById(Nullable<int> institutionId)
        {
            var institutionIdParameter = institutionId.HasValue ?
                new ObjectParameter("institutionId", institutionId) :
                new ObjectParameter("institutionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetInstitutionPeopleListById_Result>("sp_GetInstitutionPeopleListById", institutionIdParameter);
        }
    
        public virtual ObjectResult<sp_GetNonScheduledExamList_Result> sp_GetNonScheduledExamList(Nullable<int> institutionID)
        {
            var institutionIDParameter = institutionID.HasValue ?
                new ObjectParameter("InstitutionID", institutionID) :
                new ObjectParameter("InstitutionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetNonScheduledExamList_Result>("sp_GetNonScheduledExamList", institutionIDParameter);
        }
    
        public virtual ObjectResult<sp_GetPersonList_Result> sp_GetPersonList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetPersonList_Result>("sp_GetPersonList");
        }
    
        public virtual ObjectResult<sp_GetProgramInfoByID_Result> sp_GetProgramInfoByID(Nullable<int> programId)
        {
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("programId", programId) :
                new ObjectParameter("programId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProgramInfoByID_Result>("sp_GetProgramInfoByID", programIdParameter);
        }
    
        public virtual ObjectResult<sp_GetProgramList_Result> sp_GetProgramList(Nullable<int> curriculumid)
        {
            var curriculumidParameter = curriculumid.HasValue ?
                new ObjectParameter("curriculumid", curriculumid) :
                new ObjectParameter("curriculumid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProgramList_Result>("sp_GetProgramList", curriculumidParameter);
        }
    
        public virtual ObjectResult<sp_GetProgramListByID_Result> sp_GetProgramListByID(Nullable<int> programid)
        {
            var programidParameter = programid.HasValue ?
                new ObjectParameter("programid", programid) :
                new ObjectParameter("programid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProgramListByID_Result>("sp_GetProgramListByID", programidParameter);
        }
    
        public virtual ObjectResult<sp_GetProgramStatusList_Result> sp_GetProgramStatusList()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetProgramStatusList_Result>("sp_GetProgramStatusList");
        }
    
        public virtual ObjectResult<sp_GetQuestions_Result> sp_GetQuestions(Nullable<int> examid)
        {
            var examidParameter = examid.HasValue ?
                new ObjectParameter("examid", examid) :
                new ObjectParameter("examid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetQuestions_Result>("sp_GetQuestions", examidParameter);
        }
    
        public virtual ObjectResult<sp_GetRosterByScheduledExamId_Result> sp_GetRosterByScheduledExamId(Nullable<int> scheduledExamId)
        {
            var scheduledExamIdParameter = scheduledExamId.HasValue ?
                new ObjectParameter("scheduledExamId", scheduledExamId) :
                new ObjectParameter("scheduledExamId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetRosterByScheduledExamId_Result>("sp_GetRosterByScheduledExamId", scheduledExamIdParameter);
        }
    
        public virtual ObjectResult<sp_GetScheduledExamInfoById_Result> sp_GetScheduledExamInfoById(Nullable<int> institutionId, Nullable<int> scheduledExamId)
        {
            var institutionIdParameter = institutionId.HasValue ?
                new ObjectParameter("institutionId", institutionId) :
                new ObjectParameter("institutionId", typeof(int));
    
            var scheduledExamIdParameter = scheduledExamId.HasValue ?
                new ObjectParameter("scheduledExamId", scheduledExamId) :
                new ObjectParameter("scheduledExamId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetScheduledExamInfoById_Result>("sp_GetScheduledExamInfoById", institutionIdParameter, scheduledExamIdParameter);
        }
    
        public virtual ObjectResult<sp_GetUserProfileById_Result> sp_GetUserProfileById(Nullable<int> personid)
        {
            var personidParameter = personid.HasValue ?
                new ObjectParameter("personid", personid) :
                new ObjectParameter("personid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetUserProfileById_Result>("sp_GetUserProfileById", personidParameter);
        }
    
        public virtual ObjectResult<sp_ListSubskillInCourseOutcome_Result> sp_ListSubskillInCourseOutcome(Nullable<int> courseOutcomesID)
        {
            var courseOutcomesIDParameter = courseOutcomesID.HasValue ?
                new ObjectParameter("CourseOutcomesID", courseOutcomesID) :
                new ObjectParameter("CourseOutcomesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_ListSubskillInCourseOutcome_Result>("sp_ListSubskillInCourseOutcome", courseOutcomesIDParameter);
        }
    
        public virtual int sp_ToggleSubskillInCourseOutcome(Nullable<int> courseOutcomesID, Nullable<int> subskillID)
        {
            var courseOutcomesIDParameter = courseOutcomesID.HasValue ?
                new ObjectParameter("CourseOutcomesID", courseOutcomesID) :
                new ObjectParameter("CourseOutcomesID", typeof(int));
    
            var subskillIDParameter = subskillID.HasValue ?
                new ObjectParameter("SubskillID", subskillID) :
                new ObjectParameter("SubskillID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ToggleSubskillInCourseOutcome", courseOutcomesIDParameter, subskillIDParameter);
        }
    
        public virtual int sp_UpdateAllScheduledExams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateAllScheduledExams");
        }
    
        public virtual int sp_UpsertAnswers(Nullable<int> examitemid, Nullable<int> rosterid, string answer)
        {
            var examitemidParameter = examitemid.HasValue ?
                new ObjectParameter("examitemid", examitemid) :
                new ObjectParameter("examitemid", typeof(int));
    
            var rosteridParameter = rosterid.HasValue ?
                new ObjectParameter("rosterid", rosterid) :
                new ObjectParameter("rosterid", typeof(int));
    
            var answerParameter = answer != null ?
                new ObjectParameter("answer", answer) :
                new ObjectParameter("answer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpsertAnswers", examitemidParameter, rosteridParameter, answerParameter);
        }
    
        public virtual int sp_UpsertExamItem(Nullable<int> examitemid, Nullable<int> examid, Nullable<int> key1id, Nullable<int> key2id, Nullable<int> key3id, string questionobjective, string stem, string destractor1, string destractor2, string destractor3, string destractor4, string correctanswer)
        {
            var examitemidParameter = examitemid.HasValue ?
                new ObjectParameter("examitemid", examitemid) :
                new ObjectParameter("examitemid", typeof(int));
    
            var examidParameter = examid.HasValue ?
                new ObjectParameter("examid", examid) :
                new ObjectParameter("examid", typeof(int));
    
            var key1idParameter = key1id.HasValue ?
                new ObjectParameter("key1id", key1id) :
                new ObjectParameter("key1id", typeof(int));
    
            var key2idParameter = key2id.HasValue ?
                new ObjectParameter("key2id", key2id) :
                new ObjectParameter("key2id", typeof(int));
    
            var key3idParameter = key3id.HasValue ?
                new ObjectParameter("key3id", key3id) :
                new ObjectParameter("key3id", typeof(int));
    
            var questionobjectiveParameter = questionobjective != null ?
                new ObjectParameter("questionobjective", questionobjective) :
                new ObjectParameter("questionobjective", typeof(string));
    
            var stemParameter = stem != null ?
                new ObjectParameter("stem", stem) :
                new ObjectParameter("stem", typeof(string));
    
            var destractor1Parameter = destractor1 != null ?
                new ObjectParameter("destractor1", destractor1) :
                new ObjectParameter("destractor1", typeof(string));
    
            var destractor2Parameter = destractor2 != null ?
                new ObjectParameter("destractor2", destractor2) :
                new ObjectParameter("destractor2", typeof(string));
    
            var destractor3Parameter = destractor3 != null ?
                new ObjectParameter("destractor3", destractor3) :
                new ObjectParameter("destractor3", typeof(string));
    
            var destractor4Parameter = destractor4 != null ?
                new ObjectParameter("destractor4", destractor4) :
                new ObjectParameter("destractor4", typeof(string));
    
            var correctanswerParameter = correctanswer != null ?
                new ObjectParameter("correctanswer", correctanswer) :
                new ObjectParameter("correctanswer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpsertExamItem", examitemidParameter, examidParameter, key1idParameter, key2idParameter, key3idParameter, questionobjectiveParameter, stemParameter, destractor1Parameter, destractor2Parameter, destractor3Parameter, destractor4Parameter, correctanswerParameter);
        }
    
        public virtual int sp_UpsertInstitutionProgram(Nullable<int> institutionProgramID, Nullable<int> institutionID, Nullable<int> programID)
        {
            var institutionProgramIDParameter = institutionProgramID.HasValue ?
                new ObjectParameter("InstitutionProgramID", institutionProgramID) :
                new ObjectParameter("InstitutionProgramID", typeof(int));
    
            var institutionIDParameter = institutionID.HasValue ?
                new ObjectParameter("InstitutionID", institutionID) :
                new ObjectParameter("InstitutionID", typeof(int));
    
            var programIDParameter = programID.HasValue ?
                new ObjectParameter("ProgramID", programID) :
                new ObjectParameter("ProgramID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpsertInstitutionProgram", institutionProgramIDParameter, institutionIDParameter, programIDParameter);
        }
    
        public virtual int sp_UpsertPersonInstitution(Nullable<int> personId, Nullable<int> institutionId, Nullable<int> curriculumID, string firstName, string lastName, Nullable<System.DateTime> dob, string email, string address1, string address2, string city, string state, string zip, string phoneNumber1, string phoneNumber1Type, string phoneNumber2, string phoneNumber2Type, string userName, string password, Nullable<bool> isTaker, Nullable<bool> isInstitution, Nullable<bool> isSA, Nullable<bool> isISA, Nullable<bool> isReports, Nullable<bool> isCurriculum, Nullable<bool> isEmployee)
        {
            var personIdParameter = personId.HasValue ?
                new ObjectParameter("personId", personId) :
                new ObjectParameter("personId", typeof(int));
    
            var institutionIdParameter = institutionId.HasValue ?
                new ObjectParameter("institutionId", institutionId) :
                new ObjectParameter("institutionId", typeof(int));
    
            var curriculumIDParameter = curriculumID.HasValue ?
                new ObjectParameter("CurriculumID", curriculumID) :
                new ObjectParameter("CurriculumID", typeof(int));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("firstName", firstName) :
                new ObjectParameter("firstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("lastName", lastName) :
                new ObjectParameter("lastName", typeof(string));
    
            var dobParameter = dob.HasValue ?
                new ObjectParameter("dob", dob) :
                new ObjectParameter("dob", typeof(System.DateTime));
    
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var address1Parameter = address1 != null ?
                new ObjectParameter("address1", address1) :
                new ObjectParameter("address1", typeof(string));
    
            var address2Parameter = address2 != null ?
                new ObjectParameter("address2", address2) :
                new ObjectParameter("address2", typeof(string));
    
            var cityParameter = city != null ?
                new ObjectParameter("city", city) :
                new ObjectParameter("city", typeof(string));
    
            var stateParameter = state != null ?
                new ObjectParameter("state", state) :
                new ObjectParameter("state", typeof(string));
    
            var zipParameter = zip != null ?
                new ObjectParameter("zip", zip) :
                new ObjectParameter("zip", typeof(string));
    
            var phoneNumber1Parameter = phoneNumber1 != null ?
                new ObjectParameter("phoneNumber1", phoneNumber1) :
                new ObjectParameter("phoneNumber1", typeof(string));
    
            var phoneNumber1TypeParameter = phoneNumber1Type != null ?
                new ObjectParameter("phoneNumber1Type", phoneNumber1Type) :
                new ObjectParameter("phoneNumber1Type", typeof(string));
    
            var phoneNumber2Parameter = phoneNumber2 != null ?
                new ObjectParameter("phoneNumber2", phoneNumber2) :
                new ObjectParameter("phoneNumber2", typeof(string));
    
            var phoneNumber2TypeParameter = phoneNumber2Type != null ?
                new ObjectParameter("phoneNumber2Type", phoneNumber2Type) :
                new ObjectParameter("phoneNumber2Type", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("userName", userName) :
                new ObjectParameter("userName", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var isTakerParameter = isTaker.HasValue ?
                new ObjectParameter("isTaker", isTaker) :
                new ObjectParameter("isTaker", typeof(bool));
    
            var isInstitutionParameter = isInstitution.HasValue ?
                new ObjectParameter("isInstitution", isInstitution) :
                new ObjectParameter("isInstitution", typeof(bool));
    
            var isSAParameter = isSA.HasValue ?
                new ObjectParameter("isSA", isSA) :
                new ObjectParameter("isSA", typeof(bool));
    
            var isISAParameter = isISA.HasValue ?
                new ObjectParameter("isISA", isISA) :
                new ObjectParameter("isISA", typeof(bool));
    
            var isReportsParameter = isReports.HasValue ?
                new ObjectParameter("isReports", isReports) :
                new ObjectParameter("isReports", typeof(bool));
    
            var isCurriculumParameter = isCurriculum.HasValue ?
                new ObjectParameter("isCurriculum", isCurriculum) :
                new ObjectParameter("isCurriculum", typeof(bool));
    
            var isEmployeeParameter = isEmployee.HasValue ?
                new ObjectParameter("isEmployee", isEmployee) :
                new ObjectParameter("isEmployee", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpsertPersonInstitution", personIdParameter, institutionIdParameter, curriculumIDParameter, firstNameParameter, lastNameParameter, dobParameter, emailParameter, address1Parameter, address2Parameter, cityParameter, stateParameter, zipParameter, phoneNumber1Parameter, phoneNumber1TypeParameter, phoneNumber2Parameter, phoneNumber2TypeParameter, userNameParameter, passwordParameter, isTakerParameter, isInstitutionParameter, isSAParameter, isISAParameter, isReportsParameter, isCurriculumParameter, isEmployeeParameter);
        }
    
        public virtual int sp_UpsertProgramAndStatus(Nullable<int> programId, string shortName, string longName, string description, Nullable<int> curriculumid, Nullable<int> statusId)
        {
            var programIdParameter = programId.HasValue ?
                new ObjectParameter("programId", programId) :
                new ObjectParameter("programId", typeof(int));
    
            var shortNameParameter = shortName != null ?
                new ObjectParameter("shortName", shortName) :
                new ObjectParameter("shortName", typeof(string));
    
            var longNameParameter = longName != null ?
                new ObjectParameter("longName", longName) :
                new ObjectParameter("longName", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var curriculumidParameter = curriculumid.HasValue ?
                new ObjectParameter("curriculumid", curriculumid) :
                new ObjectParameter("curriculumid", typeof(int));
    
            var statusIdParameter = statusId.HasValue ?
                new ObjectParameter("statusId", statusId) :
                new ObjectParameter("statusId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpsertProgramAndStatus", programIdParameter, shortNameParameter, longNameParameter, descriptionParameter, curriculumidParameter, statusIdParameter);
        }
    
        public virtual int sp_UpsertScheduledExam(Nullable<int> scheduledExamId, Nullable<int> institutionpeopleid, Nullable<int> examid, string examname, Nullable<System.DateTime> examDate, Nullable<System.DateTime> examStartTime, Nullable<System.DateTime> examEndTime, string examlocation)
        {
            var scheduledExamIdParameter = scheduledExamId.HasValue ?
                new ObjectParameter("scheduledExamId", scheduledExamId) :
                new ObjectParameter("scheduledExamId", typeof(int));
    
            var institutionpeopleidParameter = institutionpeopleid.HasValue ?
                new ObjectParameter("institutionpeopleid", institutionpeopleid) :
                new ObjectParameter("institutionpeopleid", typeof(int));
    
            var examidParameter = examid.HasValue ?
                new ObjectParameter("examid", examid) :
                new ObjectParameter("examid", typeof(int));
    
            var examnameParameter = examname != null ?
                new ObjectParameter("examname", examname) :
                new ObjectParameter("examname", typeof(string));
    
            var examDateParameter = examDate.HasValue ?
                new ObjectParameter("examDate", examDate) :
                new ObjectParameter("examDate", typeof(System.DateTime));
    
            var examStartTimeParameter = examStartTime.HasValue ?
                new ObjectParameter("examStartTime", examStartTime) :
                new ObjectParameter("examStartTime", typeof(System.DateTime));
    
            var examEndTimeParameter = examEndTime.HasValue ?
                new ObjectParameter("examEndTime", examEndTime) :
                new ObjectParameter("examEndTime", typeof(System.DateTime));
    
            var examlocationParameter = examlocation != null ?
                new ObjectParameter("examlocation", examlocation) :
                new ObjectParameter("examlocation", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpsertScheduledExam", scheduledExamIdParameter, institutionpeopleidParameter, examidParameter, examnameParameter, examDateParameter, examStartTimeParameter, examEndTimeParameter, examlocationParameter);
        }
    
        public virtual int sp_ValidateUser(string username, string password, ObjectParameter isFound)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_ValidateUser", usernameParameter, passwordParameter, isFound);
        }
    
        public virtual int UpdateScheduledExam(Nullable<int> scheduledexamid, Nullable<int> examid, string examname, Nullable<System.DateTime> examdate, Nullable<System.DateTime> examstarttime, Nullable<System.DateTime> examendtime, string examlocation, Nullable<int> institutionpeopleid)
        {
            var scheduledexamidParameter = scheduledexamid.HasValue ?
                new ObjectParameter("scheduledexamid", scheduledexamid) :
                new ObjectParameter("scheduledexamid", typeof(int));
    
            var examidParameter = examid.HasValue ?
                new ObjectParameter("examid", examid) :
                new ObjectParameter("examid", typeof(int));
    
            var examnameParameter = examname != null ?
                new ObjectParameter("examname", examname) :
                new ObjectParameter("examname", typeof(string));
    
            var examdateParameter = examdate.HasValue ?
                new ObjectParameter("examdate", examdate) :
                new ObjectParameter("examdate", typeof(System.DateTime));
    
            var examstarttimeParameter = examstarttime.HasValue ?
                new ObjectParameter("examstarttime", examstarttime) :
                new ObjectParameter("examstarttime", typeof(System.DateTime));
    
            var examendtimeParameter = examendtime.HasValue ?
                new ObjectParameter("examendtime", examendtime) :
                new ObjectParameter("examendtime", typeof(System.DateTime));
    
            var examlocationParameter = examlocation != null ?
                new ObjectParameter("examlocation", examlocation) :
                new ObjectParameter("examlocation", typeof(string));
    
            var institutionpeopleidParameter = institutionpeopleid.HasValue ?
                new ObjectParameter("institutionpeopleid", institutionpeopleid) :
                new ObjectParameter("institutionpeopleid", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateScheduledExam", scheduledexamidParameter, examidParameter, examnameParameter, examdateParameter, examstarttimeParameter, examendtimeParameter, examlocationParameter, institutionpeopleidParameter);
        }
    }
}
